using FluentValidation.AspNetCore;
using Microsoft.AspNetCore.Mvc;
using Payment.API.RequestValidators;
using PaymentService;
using PaymentService.DisputeModel;
using Swashbuckle.AspNetCore.Annotations;
using System.Net;

namespace PaymentAPI.Controllers
{
    /// <summary>
    /// Controller contains Api's for  dispute management
    /// </summary>
    //[ApiExplorerSettings(IgnoreApi = true)]
    [Route("api/[controller]")]
    [ApiController]
    public class DisputeController : BaseController
    {
        #region VARIABLES       
        private readonly IPaymentServices _paymentServices;
        #endregion

        #region Constructor
       /// <summary>
       /// 
       /// </summary>
       /// <param name="paymentServices"></param>
        public DisputeController(IPaymentServices paymentServices)
        {
            _paymentServices = paymentServices;
        }
        #endregion

        #region GET


        /// <summary>
        /// Get details of a dispute 
        /// </summary>
        /// <param name="DisputeId">An autogenerated stripe id (Dispute Id gets generated whenever any refund goes into dispute)</param>
        /// <param name="IsTestRestaurant">Field defines that restaurant is accepting live/test payment and mapped with table [Restaurant]</param>
        /// <returns></returns>
        [HttpGet, Route("GetDisputeDetails")]
        [SwaggerResponse((int)HttpStatusCode.OK, Type = typeof(Stripe.Dispute))]
        public IActionResult GetDisputeDetails([SwaggerParameter(Required = true)]string DisputeId, [SwaggerParameter(Required = true)]bool IsTestRestaurant = false)
        {
            var result = _paymentServices.GetDisputeDetails(DisputeId, IsTestRestaurant);

            if (result != null)
                return new OkObjectResult(new { IsSuccess = true, StatusCode = HttpStatusCode.OK, Message = "Success", Entity = result });
            else
                return new BadRequestObjectResult(new { IsSuccess = false, StatusCode = HttpStatusCode.BadRequest, Message = "Error", Entity = result });

        }

        /// <summary>
        /// Get list of all disputes raised from abitnow
        /// </summary>
        /// <param name="IsTestRestaurant">Field defines that restaurant is accepting live/test payment and mapped with table [Restaurant]</param>
        /// <returns></returns>
        [HttpGet, Route("GetDisputeList")]
        [SwaggerResponse((int)HttpStatusCode.OK, Type = typeof(Stripe.Refund))]
        public IActionResult GetDisputeList([SwaggerParameter(Required = true)]bool IsTestRestaurant = false)
        {

            var result = _paymentServices.GetDisputeList( IsTestRestaurant);

            if (result != null)
                return new OkObjectResult(new { IsSuccess = true, StatusCode = HttpStatusCode.OK, Message = "Success", Entity = result });
            else
                return new BadRequestObjectResult(new { IsSuccess = false, StatusCode = HttpStatusCode.BadRequest, Message = "Error", Entity = result });

        }

        /// <summary>
        /// Get list of disputes against a payment intent Id
        /// </summary>
        /// <param name="PaymentIntentId">Stripe payment Intent Id</param>
        /// <param name="IsTestRestaurant">Field defines that restaurant is accepting live/test payment and mapped with table [Restaurant]</param>
        /// <returns></returns>
        [HttpGet, Route("GetDisputeListForPaymentIntent")]
        //[Produces(typeof(List<Stripe.Refund>))]
        [SwaggerResponse((int)HttpStatusCode.OK, Type = typeof(Stripe.Refund))]
        public IActionResult GetDisputeListForPaymentIntent([SwaggerParameter(Required = true)]string PaymentIntentId, [SwaggerParameter(Required = true)]bool IsTestRestaurant = false)
        {

            var result = _paymentServices.GetDisputeListForPaymentIntent(PaymentIntentId,IsTestRestaurant);

            if (result != null)
                return new OkObjectResult(new { IsSuccess = true, StatusCode = HttpStatusCode.OK, Message = "Success", Entity = result });
            else
                return new BadRequestObjectResult(new { IsSuccess = false, StatusCode = HttpStatusCode.BadRequest, Message = "Error", Entity = result });

        }

        #endregion

        #region POST

        /// <summary>
        ///update details corresponding to dispute 
        /// </summary>
        /// <param name="disputeUpdateRequest">Create refund request class</param>
        /// <returns></returns>
        [HttpPost, Route("UpdateDispute")]
        //[Produces(typeof(Stripe.Dispute))]
        [SwaggerResponse((int)HttpStatusCode.OK, Type = typeof(Stripe.Dispute))]
        public IActionResult UpdateDispute([FromBody]DisputeUpdateRequest disputeUpdateRequest)
        {
            var results = new DisputeUpdateRequestValidator().Validate(disputeUpdateRequest);

            if (!results.IsValid)
            {
                results.AddToModelState(ModelState, null);
                return new BadRequestObjectResult(new { IsSuccess = false, StatusCode = HttpStatusCode.BadRequest, Message = "Validation Error", Entity = results });
            }

            var result = _paymentServices.UpdateDispute(disputeUpdateRequest);

            if (result != null)
                return new OkObjectResult(new { IsSuccess = true, StatusCode = HttpStatusCode.OK, Message = "Success", Entity = result });
            else
                return new BadRequestObjectResult(new { IsSuccess = false, StatusCode = HttpStatusCode.BadRequest, Message = "Error", Entity = result });


        }

        /// <summary>
        /// Api to close the dispute
        /// </summary>
        /// <param name="DisputeId">An autogenerated stripe id (Dispute Id gets generated whenever any refund goes into dispute)</param>
        /// <param name="IsTestRestaurant">Field defines that restaurant is accepting live/test payment and mapped with table [Restaurant]</param>
        /// <returns></returns>
        [HttpPost(), Route("CloseDispute")]
        //[Produces(typeof(Stripe.Dispute))]
        [SwaggerResponse((int)HttpStatusCode.OK, Type = typeof(Stripe.Dispute))]
        public IActionResult CloseDispute([SwaggerParameter(Required = true)]string DisputeId, [SwaggerParameter(Required = true)]bool IsTestRestaurant = false)
        {

            var result = _paymentServices.CloseDispute(DisputeId, IsTestRestaurant);

            if (result != null)
                return new OkObjectResult(new { IsSuccess = true, StatusCode = HttpStatusCode.OK, Message = "Success", Entity = result });
            else
                return new BadRequestObjectResult(new { IsSuccess = false, StatusCode = HttpStatusCode.BadRequest, Message = "Error", Entity = result });


        }

        #endregion
    }
}